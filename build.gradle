import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.4.1' apply false
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'signing'

}


group = 'xyz.norbjert'
archivesBaseName = "jda4spring"
version = '0.0.4'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


tasks.register('javadocJar', Jar) {
    dependsOn 'javadoc'
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

tasks.register('sourcesJar', Jar) {
    dependsOn 'classes'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}




publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // Attach the custom pom.xml to the publication
            pom {
                withXml {
                    asNode().appendNode('name', 'jda4spring')
                    asNode().appendNode('description', 'A spring boot integration for the JDA Java Discord Api')
                    asNode().appendNode('url', 'https://github.com/norbjert/JDA4Spring')
                    asNode().appendNode('licenses').appendNode('license').appendNode('name', 'Apache-2.0')
                            .appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.html')
                    // Add other metadata as needed
                }
                // Add other metadata as needed
            }

            // Attach additional artifacts

        }
    }
    repositories {
        // Configure your repository settings here
    }
}


repositories {
    maven {
        name = 'MavenCentral'
        url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
        credentials {
            username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
    mavenCentral()
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //discord api
    implementation 'net.dv8tion:JDA:5.2.2'
}

tasks.named('test') {
    useJUnitPlatform()
}
